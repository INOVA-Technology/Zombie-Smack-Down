#!/usr/bin/env ruby

require 'yaml'

def exit_game game
  Thread.new {
    game.save
    puts "\e[39m"
    exit
  }
end

def show_scores
  puts "\e[33mHighscores:"
  puts
  begin
    highscore_file = File.open("#{Dir.home}/.zsd/scores", "r")
    highscore_list = YAML.load highscore_file.read
    highscore_list.each { |s|
      info = s.split(" ")
      score = info.last
      name = info[0, info.length - 1].join(" ")
      puts "#{name.capitalize}: #{score}"
    }
  rescue
    puts "No Highscores :("
  end
  puts "\e[39m"
end

if ARGV[0] == '-t' # only used for testing local version. eg: ./ZSD -t
  require "./require/game"
elsif ARGV[0] == '-u' # updates to newest verion on github
  system "~/.zsd/update.sh"
  exit
elsif ARGV[0] == '-h' # shows help
  system "echo '\n  \e[35mBASICS:\e[39m \n
  Kick: does between 3 and 8 damage\n
  Punch: does between 4 and 7 damage \n
  Info: shows status of zombie, player, and level \n
  Scores: Shows high score list\n
  Quit: quits the game and give option to save \n \n

  \e[35mCOMBOS:\e[39m \n
  To start using combos, type \e[35mcombo\e[39m. \n
  Combos are displayed using the combolist command. \n \n

  \e[35mHEALTH:\e[39m \n
  if you want more health, type \e[35mheal\e[39m. \n
  healing costs 1 xp per health point. \n \n

  \e[35mUPGRADING:\e[39m \n
  upgrading makes attacks more affective. \n
  to upgrade type \e[35mupgrade <attack>\e[39m replacing \e[35m<attack>\e[39m with kick or punch. \n
  upgrading costs more each time.

  \e[35mTAUNT:\e[39m \n
  taunting gives or takes away xp. \n
  to taunt type \e[35mtaunt\e[39m\n
  you cannot taunt with less than 2 xp. \n

  \e[35mBLOCK:\e[39m \n
  blocking gives xp and health. \n
  to block type \e[35mblock\e[39m\n
  upgrade your block to increase health and xp added.

  '"
  exit
elsif ARGV[0] == '-s'
  show_scores
  exit
else
  require "#{Dir.home}/.zsd/require/game" # load normal game module, also loads the prompt function
end
if ARGV[0] == '-i'
  game = Stuff::Game.new
  game.info
  puts
  exit
end
require "readline"

def start hero

  cmds = ["punch", "kick", "block", "combo", "heal", "combolist", "info", "quit", "taunt", "save", "scores"]
  wave = 1
  while true
    kills = hero.prefs[:kills]
    if !hero.new_game && kills % 3 == 0
      wave = kills / 3 + 1
      tmp = 0 # amount of extra health
      case wave
      when 2, 3
        tmp = -4
      when 4, 5
        tmp = -6   
      when 6, 7, 8
        tmp = -8
      when 9, 10, 11, 12
        tmp = -10
      end
      hero.damage tmp
      puts "\e[36mwave #{wave} +#{-1 * tmp}\e[39m"
    end
    case kills
    when 0, 1, 2
      e = Stuff::Zombie.new hero
    when 3, 4, 5
      e = Stuff::BigZombie.new hero
    when 6, 7, 8
      e = Stuff::DaddyZombie.new hero
    when 9, 10, 11
      e = Stuff::GunZombie.new hero
    when 12, 13, 14
      e = Stuff::NinjaZombie.new hero 
    when 15, 16, 17
      e = Stuff::IdiotZombie.new hero
    when 18, 19, 20 
      e = Stuff::BlindZombie.new hero
    when 21, 22, 23 
      e = Stuff::StrongZombie.new hero
    when 24, 25, 26
      e = Stuff::BasicallyDeadZombie.new hero
    when 27, 28, 29
      e = Stuff::SuperZombie.new hero
    when 30, 31, 32
      e = Stuff::BossZombie.new hero
    when 33, 34, 35
      e = Stuff::UltimateZombie.new hero
    else
      hero.win
      break
    end

    ask = true

  	while e.is_alive
  		puts "Type any of the following: " + cmds.join(", ") if ask
      ask = true

      input = prompt "> ", hero # function is defined in ZSDFiles/game.rb

  		case input
  		when "punch"
        hero.attack e, "punch"
        e.attack
      when "kick"
        hero.attack e, "kick"
        e.attack
      when "block"
        hero.block
        e.attack
      when "info"
      	hero.info
        e.info
      when "quit"
      	hero.quit
      when "combolist"
        hero.comboList
      when "combo"
        hero.attack e, "combo"
        e.attack if hero.r != 0 # enemy doesnt attack if player does no damage
      when "heal"
        hero.heal
      when "taunt"
        if hero.taunts_available > 0
          hero.taunt
          hero.taunts_available -= 1
        else
          puts "\e[33mYou used all your taunts this game\e[39m"
        end
      when "easter egg"
        x = Random::rand(-175..150)
        hero.give_xp x
        puts "\e[33mBraaaiiiiinnnnsss!\e[39m (plus #{x} xp)"
      when ""
        ask = false # dont display the commands
      when "save"
        hero.save
      when "scores"
        show_scores
      else
        print "\e[33m"
        puts "Input invalid"
        print "\e[39m"
      end
    end
  end
end

def main
	game = Stuff::Game.new

  trap('TERM') {
    exit_game game
  }

  trap('INT') {
    exit_game game
  }

  trap('HUP') {
    exit_game game
  }

	start game

end

if __FILE__ == $0 # just checks to make sure the file isnt being loaded through require
	main
end
