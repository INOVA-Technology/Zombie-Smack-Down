#!/usr/bin/env ruby

require 'minitest/autorun'
require 'minitest/pride'
$rpath = "."
require './require/other'

def exit *args
	"exited"
end

describe Player do

	before do
		@player = Player.new
	end

	describe "new game started" do
		it "must not longer be a new game" do 
			@player.save[:new_game].must_equal false
		end
	end

	describe "player is killed" do
		before do
			def @player.prompt *args
				"test"
			end
		end

		it "must die" do
			@player.save[:health] = 0
			@player.check_dead.must_equal "exited"
		end

		it "must reset game" do
			expected = { :health => 25,
						 :xp => 15,
						 :rank => 1,
						 :wave => 1,
						 :zombies_killed => 0,
						 :total_kills => 0,
						 :kick_upgrade => 0,
						 :punch_upgrade => 0,
						 :taunts_available => 3,
						 :egg_used => false,
						 :new_game => true }
			@player.save[:health] = 14
			@player.die
			YAML.load_file("#{$rpath}/require/player.yml").must_equal expected
		end

		it "must save score if score is a highscore" do
			scores_file = "#{$rpath}/scores.yml"
			backup = YAML.load_file(scores_file)
			@player.save[:zombies_killed] = backup.last[0] + 1
			@player.save_score
			YAML.load_file(scores_file).must_equal(
				[[33, "Addison"], [32, "Chase"], [1, "test"],
				[0, "Nobody"], [0, "Nobody"]])
			File.open(scores_file, "w") { |file| 
				YAML.dump(backup, file)
			}
			# if this test fails, the scores.yml file will have to be reset
		end

		it "wont save score if score isnt a highscore" do
			scores_file = "#{$rpath}/scores.yml"
			backup = YAML.load_file(scores_file)
			@player.save[:zombies_killed] = backup.last[0] - 1
			@player.save_score
			YAML.load_file(scores_file).must_equal backup
			# if this test fails, the scores.yml file will have to be reset
		end
	end

end

describe Cli do

	before do
		@cli = Cli.new
		@cli.spawn_zombie
	end

	describe "kick" do
		it "must damage zombie" do
			health = @cli.zombie.health
			@cli.kick
			@cli.zombie.health.must_be :<, health
		end

		it "must have zombie attack player" do
			health = @cli.player.save[:health]
			@cli.kick
			@cli.player.save[:health].must_be :<, health
		end
	end

	describe "punch" do
		it "must damage zombie" do
			health = @cli.zombie.health
			@cli.punch
			@cli.zombie.health.must_be :<, health
		end

		it "must have zombie attack player" do
			health = @cli.player.save[:health]
			@cli.punch
			@cli.player.save[:health].must_be :<, health
		end
	end

	describe "combo" do
		before do
			def @cli.prompt *args
				"kick punch"
			end
		end

		it "must damage zombie" do
			health = @cli.zombie.health
			@cli.combo
			@cli.zombie.health.must_be :<, health
		end

		it "must have zombie attack player" do
			health = @cli.player.save[:health]
			@cli.combo
			@cli.player.save[:health].must_be :<, health
		end

		it "requires correct amount of xp" do
			z_health = @cli.zombie.health
			p_health = @cli.player.save[:health]
			@cli.player.save[:xp] = 1
			@cli.player.save[:xp].must_equal 1
			z_health.must_equal @cli.zombie.health
			p_health.must_equal @cli.player.save[:health]
		end
	end

	describe "combolist" do
		it "must list correct amount or combos" do
			@cli.player.save[:rank] = 3

			expected = capture_io do
				puts ["Unlocked Combos:",
					"Kick Punch: -2 xp",
					"Trip Stomp: -3 xp",
					"Punch Punch Kick: -4 xp"].map(&:magenta).join("\n")
			end

			message = capture_io do
				@cli.combolist
			end
			assert_equal expected, message
		end
	end

	describe "taunt" do
		it "must require correct amount of xp" do
			expected_xp = @cli.player.save[:xp] = 1
			@cli.taunt
			@cli.player.save[:xp].must_equal expected_xp
		end

		it "wont work if no taunts are left" do
			expected_xp = @cli.player.save[:xp]
			@cli.player.save[:taunts_available] = 0
			@cli.taunt
			@cli.player.save[:xp].must_equal expected_xp
		end
	end

	describe "info" do
		it "must print correct player info" do
			new_save = { :health => 48,
						 :xp => 27,
						 :rank => 2,
						 :wave => 2,
						 :zombies_killed => 6,
						 :total_kills => 37,
						 :kick_upgrade => 4,
						 :punch_upgrade => 3,
						 :taunts_available => 2 }
			@cli.player.save.merge! new_save

			actual = capture_io do
				@cli.player.info
			end

			expected = capture_io do
				puts "Health: 48".magenta
				puts "XP: 27".magenta
				puts "Rank: 2".magenta
				puts "Wave: 2".magenta
				puts "Zombies Killed: 6".magenta
				puts "Total Kills: 37".magenta
				puts "Kick Upgrade: 4".magenta
				puts "Punch Upgrade: 3".magenta
				puts "Taunts Available: 2".magenta
			end
			assert_equal expected, actual
		end

		it "must print correct zombie info" do
			@cli.zombie = DaddyZombie.new
			@cli.zombie.health = 2
			actual = capture_io do
				@cli.zombie.info
			end

			expected = capture_io do
				puts "Daddy Zombie health: 2".magenta
				puts "Attack Strength: 4 to 10".magenta
			end
			assert_equal expected, actual
		end
	end

	describe "scores" do
		it "must show correct scores" do
			actual = capture_io do
				@cli.scores
			end

			expected = capture_io do
				puts "High Scores:".magenta
				puts "Addison: 33".magenta
				puts "Chase: 32".magenta
				puts "Nobody: 0".magenta
				puts "Nobody: 0".magenta
				puts "Nobody: 0".magenta
			end

			assert_equal actual, expected
		end
	end

	describe "quit" do
		before do
			def exit *args
				"exited"
			end

			def @cli.prompt *args
				"no"
			end
		end

		it "must quit" do
			@cli.quit.must_equal "exited"
		end

		it "wont save if asked not to" do
			health = @cli.player.save[:health] = 2
			@cli.quit
			expected = { :health => 25,
						 :xp => 15,
						 :rank => 1,
						 :wave => 1,
						 :zombies_killed => 0,
						 :total_kills => 0,
						 :kick_upgrade => 0,
						 :punch_upgrade => 0,
						 :taunts_available => 3,
						 :egg_used => false,
						 :new_game => true }
			@cli.player = Player.new
			YAML.load_file("#{$rpath}/require/player.yml").must_equal expected
		end

		it "must save if asked to" do
			def @cli.prompt *args
				"yes"
			end
			health = @cli.player.save[:health] = 2
			@cli.quit
			expected = { :health => 2,
						 :xp => 15,
						 :rank => 1,
						 :wave => 1,
						 :zombies_killed => 0,
						 :total_kills => 0,
						 :kick_upgrade => 0,
						 :punch_upgrade => 0,
						 :taunts_available => 3,
						 :egg_used => false,
						 :new_game => false }
			YAML.load_file("#{$rpath}/require/player.yml").must_equal expected
			@cli.player = Player.new
			@cli.player.die
		end
	end

	describe "help" do
		it "must print all commands" do
			actual = capture_io do
				@cli.help
			end

			expected = capture_io do
				p_info "Available commands:"
				puts(@cli.commands.join " ")
			end

			assert_equal actual, expected
		end
	end

	describe "heal" do
		it "must give health" do
			health = @cli.player.save[:health]
			@cli.heal 5
			@cli.player.save[:health].must_equal(health + 5)
		end

		it "wont give health when there isnt enough xp" do
			health = @cli.player.save[:health]
			@cli.player.save[:xp] = 4 
			@cli.heal 5
			@cli.player.save[:health].must_equal health
		end
	end

	describe "easter" do
		it "must change xp" do
			health = @cli.player.save[:xp]
			@cli.easter "egg"
			@cli.player.save[:xp].wont_equal health
		end

		it "wont work more than once" do
			health = @cli.player.save[:xp]
			@cli.player.save[:egg_used] = true
			@cli.easter "egg"
			@cli.player.save[:xp].must_equal health
		end
	end
end